---
title: DANL Project 
subtitle: "DANL 200: Introduction to Data Analytics"
author: 
  - name: Kenzie Perkins
date: last-modified

execute: 
  echo: true    # true false
  eval: true    # true false
  warning: false    # true false
  message: false    # true false
  fig-width: 9
  # fig-height: 5
  
format: 
  html:
    toc: true    # true false
    number-sections: true    # true false
    code-fold: show    # true false show       # https://quarto.org/docs/output-formats/html-code.html
    code-tools: true    # true false
    highlight-style: atom-one        # atom-one tango espresso   # https://quarto.org/docs/output-formats/html-code.html#highlighting
---


```{r setup}
#| include: false
library(tidyverse)
library(hrbrthemes)
library(skimr)
library(DT)

```

# Auto-completion

```{r}
library(tidyverse)
```

```{r}
fare <- 10.00
tip <- 2.00
tax <- 0.80
```

total <- tax + tip + fare
str_c("the total trip cost is: $ ") 
total

```{r}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy,
                           color = cty))

```

```{r}



ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy,
                           color = displ <5))
```

```{r}
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy,
                           color = displ > 5 & hwy > 20))
                           
```

```{r}
ggplot(data = mpg) + 
  geom_point(mapping = 
               aes(x = displ, 
                   y = hwy), 
             alpha = .5) + 
  facet_wrap( class ~ .) #in R we use ~ instead of equal signs for formulas.
```
                           
```{r}
ggplot(data = mpg) + 
  geom_point(mapping = 
               aes(x = displ, 
                   y = hwy), 
             alpha = .5) + 
  facet_wrap( class ~ . , nrow = 1)
```

```{r}
ggplot(data = mpg) + 
  geom_point(mapping = 
               aes(x = displ, 
                   y = hwy), 
             alpha = .5) + 
  facet_wrap( class ~ . , ncol = 2)
```

```{r}
ggplot(data = mpg) + 
  geom_point(mapping = 
               aes(x = displ, 
                   y = hwy),
             alpha = .5) + 
  facet_grid(drv ~ cyl)
```

```{r}
ggplot(data = mpg) + 
  geom_boxplot(mapping = 
               aes(x = displ, 
                   y = hwy),
             alpha = .5) + 
  facet_grid(drv ~ cyl, 
             scales = "free_x")
```

```{r}
ggplot(data = mpg) + 
  geom_point(mapping = 
               aes(x = displ, 
                   y = hwy),
             alpha = .3) +
  geom_smooth(mapping = 
                aes(x = displ, 
                    y = hwy))
```
```{r}

```

#A distribution of a categorical variable (e.g., geom_bar() and more)
##A distribution of a continuous variable (e.g., geom_histogram() and more)
###A relationship between two categorical variables (e.g., geom_bar() and more)
####A relationship between two continuous variables (e.g., geom_point() with geom_smooth() and more)
#####A relationship between a categorical variable and a continuous variable (e.g., geom_boxplot() and more)
#####A time trend of a categorical variable (e.g., geom_bar() and geom_line and geom_smooth or geom_point)
######A time trend of a continuous variable (e.g., geom_line() and more)



#CLASSWORK 7

#Q1a
```{r}
ggplot(data = mpg,
       mapping = aes(x = displ, y = hwy)) +
  geom_point(alpha = .3) +
  geom_smooth (se = F) 
```
#Q1b
```{r}
ggplot(data = mpg,
        mapping = aes(x = displ, y = hwy)) +
  geom_point (alpha = .3) + 
  geom_smooth (se = F,
               mapping = aes(group = drv))
```

#Q1c 
```{r}
ggplot(data = mpg,
       mapping = aes (x = displ, y = hwy
                      color = drv) +
         geom_smooth (se = F,
                      mapping =aes(group = drv))
```

```{r}
ggplot(data = mpg,
       mapping = aes(x = displ, y =hwy)) +
  geom_point(mapping = aes(color = drv),
                           alpha = .5) +
               geom_smooth(se = F)
```

#Q1d

```{r}
ggplot(data = mpg,
       mapping = aes(x = displ, y = hwy)) +
  geom_smooth(mapping = aes(linetype = drv), 
              se = F) +
  geom_point(mapping = aes(color = drv),
             alpha = .5)
```

```{r}
ggplot( mpg,
        aes(x = displ, y = hwy)) +
  geom_point(color = "white",
             size = 5) +
  geom_point(aes(color = drv),
             alpha = .5)
```

```{r}
library(tidyverse)
sale_df <- read_csv(
  "https://bcdanl.github.io/data/home_sales_nyc.csv")
```
```{r}
ggplot(flights, aes(x = carrier)) +
  geom_bar 
```
  

library(nycflights13)


```{r}
library(tidyverse)
library(nycflights13)
flights <- nycflights13::flights

??flights

```



#Classwork 9 Q1

Find all flights that
Had an arrival delay of two or more hours
Flew to Houston (IAH or HOU)
Were operated by United, American, or Delta
Departed in summer (July, August, and September)
Arrived more than two hours late, but didnâ€™t leave late
Were delayed by at least an hour, but made up over 30 minutes in flight
Departed between midnight and 6am (inclusive)


```{r}
flights |>
  filter(arr_delay >=120)
```

```{r}
flights |>
  filter(dest == "IAH" | dest == "HOU")
```

```{r}
airlines


airlines_AA_DL_UA <- flights |>
  filter(carrier %in% c("AA" , "DL" , "UA" )) 

```

```{r}
summer_flights <- flights |> 
  filter(month %in% c(7,8,9))
```


```{r}
dep_ontime_arr_late <- flights |>
  filter(arr_delay > 120 & dep_delay <= 0)
```

```{r}
dep_69_arr_30 <- flights |>
  filter(dep_delay >= 60, arr_delay < -30)
```

```{r}
overnight <- flights |>
  filter(dep_time > 0, dep_time <600)

```


#Q1B

```{r}
missing_dep <- flights |>
  filter(is.na(dep_time)) 

nrow(missing_dep)
```
 # or you can do it like this
```{r}
library(skimr)
sum_flights <- skim(flights)

sum_flights |>
  filter(n_missing > 0 )

```

This probably mean that the flights are canceled. 

#Q1c

```{r}
NA^0
```

```{r}
NA | TRUE
```

```{r}
FALSE & NA
```

```{r}
NA * 0
```

#Q1d

```{r}
flights |>
  distinct(month, day) |>
  
```
#Q2a
```{r}
df <- data.frame(num = c(1, 4, NA, 2, NA, 3, 7),
                 chr = c("A", "A", "A", "B", "X", "Z", "D"))
```

```{r}
df |>
  arrange(desc(num))

```

```{r}
as.numeric(TRUE)
as.numeric(FALSE)
```

```{r}
as.numeric(is.na(df$num))
```

```{r}
df |>
  arrange(desc(is.na(num)))
```


#Q2b

```{r}
most_delayed <- flights |>
  arrange(-dep_delay)
```

#Q2b

```{r}
left_earliest <- flights |>
  arrange(dep_delay)
```

#Q2c

```{r}
v = \frac{\text{distance}{\text{time}}
```


```{r}
speed <- flights |>
  arrange(- (distance / air_time))
```

#Q2d

```{r}
farthest <- flights |>
  arrange(-distance)

shortest <- flights |>
  arrange(distance)
```


#Classwork 10 Question 2

#Q2a
```{r}

q2a <- flights |> 
  select(air_time, dep_time, sched_dep_time) |>

  mutate(dep_time_hour = dep_time %% 100,
         dep_time_minutes = dep_time %% 100,
         sched_dep_time_hour = sched_dep_time %% 100,
         sched_dep_time_minutes = sched_dep_time %% 100) |> 
  mutate(dep_time = dep_time_hour * 60 + dep_time_minutes,
         sched_dep_time = sched_dep_time_hour * 60 + sched_dep_time_minutes)

```

#Q2b
```{r}

q2b <- q2a |>
  mutate(diff = arr_time - dep_time,
         .after = air_time_minutes) 
  

```

#When comparing air time with air time - departure time I expect to see how long the plane was in air for compared to the amount of time the plane was in the air for since the depature time.

#Q2c

#Comparing departure time, scheduled departure time, and departure delay I can expect the 3 numbers to be related since they all have to do with times of departure. 

#Q2d

```{r}

```


#Q2e
```{r}
q2e <- |>
  mutate(lag_Close = lag(Close),
         chg_Close = Close - lag_Close,
         pct)
```

#Q2g - Provide the R code to create a dotplot that displays the values of country, sorted by lifeExp within each continent for the year 2007.

```{r}

gapminder_2007 <- gapminder |>
  filter(year == 2007) 

length(unique(gapminder_2007$country))

gapminder_2007 <- gapminder_2007 |>
  mutate(country_by_life = fct_reorder(country,
                                       lifeExp))
gapminder_2007$country_by_life

ggplot(gapminder_2007,
       aes(x = lifeExp,
           y = country_by_life) +
  geom_point() +
  facet_wrap(continent ~ . )) 

```

Provide the R code to describe a time trend of lifeExp for both North Korea and South Korea in one ggplot figure.

```{r}

korea <- gapminder |>
  filter(str_detect(country, "Korea"))

```

```{r}
ggplot(korea, aes(x = year, y = lifeExp)) +
         geom_line(aes(x = year, y = lifeExp)) + 
         geom_point()
```

#Classwork 11

```{r}
nyc_dogs <- read_csv('https://bcdanl.github.io/data/nyc_dogs_cleaned.csv')
```

#Q1a

```{r}

q1a <- nyc_dogs |>
  group_by(breed) |>
  summarise(n = n()) |>
  arrange(-n)


```

#Q1e

```{r}

q1e <- nyc_dogs |>
  filter(!is.na(name)) |>
  filter(!is.na(gender)) |>
  count(borough, gender, name) |>
  group_by(borough, gender) |>
  slice_max(n , n=5)
```

#Q1f

```{r}
nyc_dogs <- nyc_dogs |>
  mutate(age = 2024 - birth_year)
ggplot(nyc_dogs, aes(x = age)) +
  geom_histogram()

```
# Counting with logical conditons
For each date how many flights left before 5am?

```{r}
library(nycflights13)



df_flights <- flights |>
  filter(dep_time < 500) |>
  group_by(year, month, day) |>
  count()


```

For each date what proportion of flights are delayed more than an hour. 


```{r}

df_delay <- flights |>
  group_by(year, month, day) |>
  summarize(prop = mean(dep_delay > 60, na.rm = T))


```

For each airline, how many flights are cancelled?

-assume that
  - a flight was cancelled if either 'dep_time'
  or 'arr_time' is 'NA'
  
```{r}

df_cancelled <- flights |>
  filter(is.na(dep_time)| is.na(arr_time)) |>
  group_by(carrier) |>
  summarize( n = n())

```
  
Find the worst members of each group:
eg. for each date, find the worst 10 flights in terms of arr_delay
```{r}

df_worst <- flights |>
  group_by(year, month, day) |>
  slice_max(arr_delay, n = 10)


```

Find all groups bigger than a threshold
Find the destination airport that had flights from NYC more than 17250 in 2013.


```{r}
not_cancelled <- flights |>
  filter(!(is.na(dep_time) | is.na(arr_time)))

df_dest <- flights |>
  count(dest) |>
  filter(n > 17250)
  
flights |>
  group_by(dest) |>
  filter(n() > 17250)


```

```{r}

nyc_housing_sales <- read_csv('https://bcdanl.github.io/data/nyc_housing_sales_2006-2023.csv')


```


```{r}

average_prices <- nyc_housing_sales |>
  group_by(borough) |>
  summarize(average_price =
              mean(sale_price, na.rm = TRUE))

```

```{r}

ggplot(data = average_prices) + 
  geom_col(mapping = 
               aes(x = borough, 
                   y = average_price),
             alpha = .5) + 
  facet_grid(borough ~ .)

```



```{r}


cor_data <- nyc_housing_sales |>
  filter(!is.na(gross_square_feet) & !is.na(sale_price)) |>
           group_by(borough) |>
                      summarize(corr = cor(gross_square_feet,
                                           sale_price)) 

```


```{r}

ggplot(cor_data, aes(x = borough, y = corr)) +
  geom_col() +
  labs(title = "Correlation: Square Footage vs Housing Prices",
       x = "Borough",
       y = "Correlation Coefficient") +
  theme_minimal()


```


```{r}


units_1925 <- nyc_housing_sales |>
  filter(year_built == 1925) |>
           summarize(total_units_1925 =
                       sum(total_units, na.rm = TRUE))

```

